Description: Add --passwordSource env so passwords are not needed on the
 command line.

--- a/Common/DtaOptions.cpp
+++ b/Common/DtaOptions.cpp
@@ -21,6 +21,14 @@ along with sedutil.  If not, see <http://www.gnu.org/licenses/>.
 #include "DtaOptions.h"
 #include "DtaLexicon.h"
 #include "Version.h"
+
+static uint8_t takePasswordFromSource(int sourceIsEnv, const char * name, const char * env_name,
+		char * argv[], uint8_t arg_idx, char * dest, ssize_t destlen);
+static uint8_t takePasswordFromArg(const char * name, const char * src,
+		char * dest, ssize_t destlen);
+static uint8_t takePasswordFromEnv(const char * name, const char * env_name, const char * src,
+		char * dest, ssize_t destlen);
+
 void usage()
 {
     printf("sedutil v%s Copyright 2014-2017 Bright Plaza Inc. <drivetrust@drivetrust.com>\n", GIT_VERSION);
@@ -31,6 +39,7 @@ void usage()
     printf("-v (optional)                       increase verbosity, one to five v's\n");
     printf("-n (optional)                       no password hashing. Passwords will be sent in clear text!\n");
     printf("-l (optional)                       log style output to stderr only\n");
+    printf("--passwordSource env                passwords go in SEDUTIL_(NEW)PASSWORD. Use \"-\" in argv\n");
     printf("actions \n");
     printf("--scan \n");
     printf("                                Scans the devices on the system \n");
@@ -106,6 +115,8 @@ void usage()
 
 uint8_t DtaOptions(int argc, char * argv[], DTA_OPTIONS * opts)
 {
+	int passwordFromEnv = 0;
+	uint8_t ret;
     memset(opts, 0, sizeof (DTA_OPTIONS));
     uint16_t loggingLevel = 2;
 	uint8_t baseOptions = 2; // program and option
@@ -120,6 +131,24 @@ uint8_t DtaOptions(int argc, char * argv[], DTA_OPTIONS * opts)
 			usage();
 			return DTAERROR_INVALID_COMMAND;
 		}
+		else if (!strcmp("--passwordSource", argv[i]))
+		{
+			// Right now we only support "env", but we might also
+			// do "fd:0" and "prompt" or something in the future.
+			if ((i + 1) >= argc) {
+				LOG(E) << "--passwordSource must be followed by 'argv' or 'env'";
+				return DTAERROR_INVALID_COMMAND;
+			} else if (!strcmp("argv", argv[i + 1])) { // undocumented default
+				passwordFromEnv = 0;
+			} else if (!strcmp("env", argv[i + 1])) {
+				passwordFromEnv = 1;
+			} else {
+				LOG(E) << "--passwordSource must be followed by 'argv' or 'env'";
+				return DTAERROR_INVALID_COMMAND;
+			}
+			i += 1;
+			baseOptions += 2;
+		}
 		else if ('v' == argv[i][1])
 		{
 			baseOptions += 1;
@@ -517,5 +546,77 @@ uint8_t DtaOptions(int argc, char * argv[], DTA_OPTIONS * opts)
 			return DTAERROR_INVALID_COMMAND;
         }
     }
-    return 0;
+
+	// Right now, the password may come from argv[i] or from the
+	// environment. Password and newpassword are optional.
+	// Copy the password data to the appropriate destination.
+	ret = 0;
+	ret |= takePasswordFromSource(
+		passwordFromEnv,
+		"password", "SEDUTIL_PASSWORD", argv, opts->password,
+		opts->password_data, sizeof(opts->password_data));
+	ret |= takePasswordFromSource(
+		passwordFromEnv,
+		"newpassword", "SEDUTIL_NEWPASSWORD", argv, opts->newpassword,
+		opts->newpassword_data, sizeof(opts->newpassword_data));
+
+	return ret;
+}
+
+static uint8_t takePasswordFromSource(int sourceIsEnv, const char * name, const char * env_name,
+		char * argv[], uint8_t arg_idx, char * dest, ssize_t destlen)
+{
+	uint8_t ret;
+
+	// No password argument set?
+	if (arg_idx == 0) {
+		return 0;
+	}
+
+	if (sourceIsEnv) {
+		if ((ret = takePasswordFromEnv(name, env_name, argv[arg_idx], dest, destlen))) {
+			return ret;
+		}
+	} else {
+		if ((ret = takePasswordFromArg(name, argv[arg_idx], dest, destlen))) {
+			return ret;
+		}
+	}
+	return 0;
+}
+
+static uint8_t takePasswordFromArg(const char * name, const char * src,
+		char * dest, ssize_t destlen)
+{
+	// - Copy password to buffer.
+	ssize_t ret;
+	if ((ret = snprintf(dest, destlen, "%s", src)) < 0 || ret >= destlen) {
+		LOG(E) << name << " is too long";
+		return DTAERROR_INVALID_COMMAND;
+	}
+	return 0;
+}
+
+static uint8_t takePasswordFromEnv(const char * name, const char * env_name, const char * src,
+		char * dest, ssize_t destlen)
+{
+	// - Check that passwords in argv are '-' so the user "sees" that
+	//   they come from elsewhere.
+	// - Check that env is set.
+	// - Copy password to buffer.
+	ssize_t ret;
+	const char * env;
+	if (strcmp(src, "-")) {
+		LOG(E) << name << " must be \"-\" when using env";
+		return DTAERROR_INVALID_COMMAND;
+	}
+	if (!(env = getenv(env_name))) {
+		LOG(E) << env_name << " must be set";
+		return DTAERROR_INVALID_COMMAND;
+	}
+	if ((ret = snprintf(dest, destlen, "%s", env)) < 0 || ret >= destlen) {
+		LOG(E) << name << " is too long";
+		return DTAERROR_INVALID_COMMAND;
+	}
+	return 0;
 }
--- a/Common/DtaOptions.h
+++ b/Common/DtaOptions.h
@@ -44,6 +44,9 @@ typedef struct _DTA_OPTIONS {
 
 	bool no_hash_passwords; /** global parameter, disables hashing of passwords */
 	sedutiloutput output_format;
+
+	char password_data[513];    /**< set password here */
+	char newpassword_data[513]; /**< set newpassword here */
 } DTA_OPTIONS;
 /** Print a usage message */
 void usage();
--- a/Common/sedutil.cpp
+++ b/Common/sedutil.cpp
@@ -99,101 +99,101 @@ int main(int argc, char * argv[])
     switch (opts.action) {
  	case sedutiloption::initialSetup:
 		LOG(D) << "Performing initial setup to use sedutil on drive " << argv[opts.device];
-        return (d->initialSetup(argv[opts.password]));
+        return (d->initialSetup(opts.password_data));
 	case sedutiloption::setup_SUM:
 		LOG(D) << "Performing SUM setup on drive " << argv[opts.device];
 		return (d->setup_SUM(opts.lockingrange, atoll(argv[opts.lrstart]),
-			atoll(argv[opts.lrlength]), argv[opts.password], argv[opts.newpassword]));
+			atoll(argv[opts.lrlength]), opts.password_data, opts.newpassword_data));
 		break;
 	case sedutiloption::setSIDPassword:
         LOG(D) << "Performing setSIDPassword ";
-        return d->setSIDPassword(argv[opts.password], argv[opts.newpassword]);
+        return d->setSIDPassword(opts.password_data, opts.newpassword_data);
 		break;
 	case sedutiloption::setAdmin1Pwd:
         LOG(D) << "Performing setPAdmin1Pwd ";
-        return d->setPassword(argv[opts.password], (char *) "Admin1",
-                            argv[opts.newpassword]);
+        return d->setPassword(opts.password_data, (char *) "Admin1",
+                            opts.newpassword_data);
 		break;
 	case sedutiloption::loadPBAimage:
         LOG(D) << "Loading PBA image " << argv[opts.pbafile] << " to " << opts.device;
-        return d->loadPBA(argv[opts.password], argv[opts.pbafile]);
+        return d->loadPBA(opts.password_data, argv[opts.pbafile]);
 		break;
 	case sedutiloption::setLockingRange:
         LOG(D) << "Setting Locking Range " << (uint16_t) opts.lockingrange << " " << (uint16_t) opts.lockingstate;
-        return d->setLockingRange(opts.lockingrange, opts.lockingstate, argv[opts.password]);
+        return d->setLockingRange(opts.lockingrange, opts.lockingstate, opts.password_data);
 		break;
 	case sedutiloption::setLockingRange_SUM:
 		LOG(D) << "Setting Locking Range " << (uint16_t)opts.lockingrange << " " << (uint16_t)opts.lockingstate << " in Single User Mode";
-		return d->setLockingRange_SUM(opts.lockingrange, opts.lockingstate, argv[opts.password]);
+		return d->setLockingRange_SUM(opts.lockingrange, opts.lockingstate, opts.password_data);
 		break;
 	case sedutiloption::enableLockingRange:
         LOG(D) << "Enabling Locking Range " << (uint16_t) opts.lockingrange;
         return (d->configureLockingRange(opts.lockingrange,
-			(DTA_READLOCKINGENABLED | DTA_WRITELOCKINGENABLED), argv[opts.password]));
+			(DTA_READLOCKINGENABLED | DTA_WRITELOCKINGENABLED), opts.password_data));
         break;
 	case sedutiloption::disableLockingRange:
 		LOG(D) << "Disabling Locking Range " << (uint16_t) opts.lockingrange;
 		return (d->configureLockingRange(opts.lockingrange, DTA_DISABLELOCKING,
-			argv[opts.password]));
+			opts.password_data));
 		break;
 	case sedutiloption::readonlyLockingRange:
 		LOG(D) << "Enabling Locking Range " << (uint16_t)opts.lockingrange;
 		return (d->configureLockingRange(opts.lockingrange,
-			DTA_WRITELOCKINGENABLED, argv[opts.password]));
+			DTA_WRITELOCKINGENABLED, opts.password_data));
 		break;
 	case sedutiloption::setupLockingRange:
 		LOG(D) << "Setup Locking Range " << (uint16_t)opts.lockingrange;
 		return (d->setupLockingRange(opts.lockingrange, atoll(argv[opts.lrstart]),
-			atoll(argv[opts.lrlength]), argv[opts.password]));
+			atoll(argv[opts.lrlength]), opts.password_data));
 		break;
 	case sedutiloption::setupLockingRange_SUM:
 		LOG(D) << "Setup Locking Range " << (uint16_t)opts.lockingrange << " in Single User Mode";
 		return (d->setupLockingRange_SUM(opts.lockingrange, atoll(argv[opts.lrstart]),
-			atoll(argv[opts.lrlength]), argv[opts.password]));
+			atoll(argv[opts.lrlength]), opts.password_data));
 		break;
 	case sedutiloption::listLockingRanges:
 		LOG(D) << "List Locking Ranges ";
-		return (d->listLockingRanges(argv[opts.password], -1));
+		return (d->listLockingRanges(opts.password_data, -1));
 		break;
 	case sedutiloption::listLockingRange:
 		LOG(D) << "List Locking Range[" << opts.lockingrange << "]";
-		return (d->listLockingRanges(argv[opts.password], opts.lockingrange));
+		return (d->listLockingRanges(opts.password_data, opts.lockingrange));
 		break;
     case sedutiloption::rekeyLockingRange:
 		LOG(D) << "Rekey Locking Range[" << opts.lockingrange << "]";
-		return (d->rekeyLockingRange(opts.lockingrange, argv[opts.password]));
+		return (d->rekeyLockingRange(opts.lockingrange, opts.password_data));
         break;
     case sedutiloption::setBandsEnabled:
         LOG(D) << "Set bands Enabled";
-        return (d->setBandsEnabled(-1, argv[opts.password]));
+        return (d->setBandsEnabled(-1, opts.password_data));
         break;
     case sedutiloption::setBandEnabled:
         LOG(D) << "Set band[" << opts.lockingrange << "] enabled";
-        return (d->setBandsEnabled(opts.lockingrange, argv[opts.password]));
+        return (d->setBandsEnabled(opts.lockingrange, opts.password_data));
         break;
 	case sedutiloption::setMBRDone:
 		LOG(D) << "Setting MBRDone " << (uint16_t)opts.mbrstate;
-		return (d->setMBRDone(opts.mbrstate, argv[opts.password]));
+		return (d->setMBRDone(opts.mbrstate, opts.password_data));
 		break;
 	case sedutiloption::setMBREnable:
 		LOG(D) << "Setting MBREnable " << (uint16_t)opts.mbrstate;
-		return (d->setMBREnable(opts.mbrstate, argv[opts.password]));
+		return (d->setMBREnable(opts.mbrstate, opts.password_data));
 		break;
 	case sedutiloption::enableuser:
         LOG(D) << "Performing enable user for user " << argv[opts.userid];
-        return d->enableUser(argv[opts.password], argv[opts.userid]);
+        return d->enableUser(opts.password_data, argv[opts.userid]);
         break;
 	case sedutiloption::activateLockingSP:
 		LOG(D) << "Activating the LockingSP on" << argv[opts.device];
-        return d->activateLockingSP(argv[opts.password]);
+        return d->activateLockingSP(opts.password_data);
         break;
 	case sedutiloption::activateLockingSP_SUM:
 		LOG(D) << "Activating the LockingSP on" << argv[opts.device];
-		return d->activateLockingSP_SUM(opts.lockingrange, argv[opts.password]);
+		return d->activateLockingSP_SUM(opts.lockingrange, opts.password_data);
 		break;
 	case sedutiloption::eraseLockingRange_SUM:
 		LOG(D) << "Erasing LockingRange " << opts.lockingrange << " on" << argv[opts.device];
-		return d->eraseLockingRange_SUM(opts.lockingrange, argv[opts.password]);
+		return d->eraseLockingRange_SUM(opts.lockingrange, opts.password_data);
 		break;
     case sedutiloption::query:
 		LOG(D) << "Performing diskquery() on " << argv[opts.device];
@@ -210,29 +210,29 @@ int main(int argc, char * argv[])
         break;
 	case sedutiloption::takeOwnership:
 		LOG(D) << "Taking Ownership of the drive at" << argv[opts.device];
-        return d->takeOwnership(argv[opts.password]);
+        return d->takeOwnership(opts.password_data);
         break;
  	case sedutiloption::revertLockingSP:
 		LOG(D) << "Performing revertLockingSP on " << argv[opts.device];
-        return d->revertLockingSP(argv[opts.password], 0);
+        return d->revertLockingSP(opts.password_data, 0);
         break;
 	case sedutiloption::setPassword:
         LOG(D) << "Performing setPassword for user " << argv[opts.userid];
-        return d->setPassword(argv[opts.password], argv[opts.userid],
-                              argv[opts.newpassword]);
+        return d->setPassword(opts.password_data, argv[opts.userid],
+                              opts.newpassword_data);
         break;
 	case sedutiloption::setPassword_SUM:
 		LOG(D) << "Performing setPassword in SUM mode for user " << argv[opts.userid];
-		return d->setNewPassword_SUM(argv[opts.password], argv[opts.userid],
-			argv[opts.newpassword]);
+		return d->setNewPassword_SUM(opts.password_data, argv[opts.userid],
+			opts.newpassword_data);
 		break;
 	case sedutiloption::revertTPer:
 		LOG(D) << "Performing revertTPer on " << argv[opts.device];
-        return d->revertTPer(argv[opts.password], 0, 0);
+        return d->revertTPer(opts.password_data, 0, 0);
         break;
 	case sedutiloption::revertNoErase:
 		LOG(D) << "Performing revertLockingSP  keep global locking range on " << argv[opts.device];
-		return d->revertLockingSP(argv[opts.password], 1);
+		return d->revertLockingSP(opts.password_data, 1);
 		break;
 	case sedutiloption::validatePBKDF2:
         LOG(D) << "Performing PBKDF2 validation ";
@@ -240,16 +240,16 @@ int main(int argc, char * argv[])
         break;
 	case sedutiloption::yesIreallywanttoERASEALLmydatausingthePSID:
 	case sedutiloption::PSIDrevert:
-		LOG(D) << "Performing a PSID Revert on " << argv[opts.device] << " with password " << argv[opts.password];
-        return d->revertTPer(argv[opts.password], 1, 0);
+		LOG(D) << "Performing a PSID Revert on " << argv[opts.device] << " with password " << opts.password_data;
+        return d->revertTPer(opts.password_data, 1, 0);
         break;
 	case sedutiloption::PSIDrevertAdminSP:
-		LOG(D) << "Performing a PSID RevertAdminSP on " << argv[opts.device] << " with password " << argv[opts.password];
-        return d->revertTPer(argv[opts.password], 1, 1);
+		LOG(D) << "Performing a PSID RevertAdminSP on " << argv[opts.device] << " with password " << opts.password_data;
+        return d->revertTPer(opts.password_data, 1, 1);
         break;
 	case sedutiloption::eraseLockingRange:
 		LOG(D) << "Erase Locking Range " << (uint16_t)opts.lockingrange;
-		return (d->eraseLockingRange(opts.lockingrange, argv[opts.password]));
+		return (d->eraseLockingRange(opts.lockingrange, opts.password_data));
 		break;
 	case sedutiloption::objDump:
 		LOG(D) << "Performing objDump " ;
